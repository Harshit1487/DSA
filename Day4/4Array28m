class Solution {
public:
    int dfs(vector<vector<int>>& b, int ri, int ci){
        bool up=ri>0, down=ri<b.size()-1, left=ci>0, right=ci<b[0].size()-1;
        
        int count = 0;
        
        if(up){
            count += b[ri-1][ci] & 1;
            if(left) count +=b[ri-1][ci-1] & 1;
            if(right) count +=b[ri-1][ci+1] & 1;
        }
        
        if(down){
            count += b[ri+1][ci] & 1;
            if(left) count +=b[ri+1][ci-1] & 1;
            if(right) count +=b[ri+1][ci+1] & 1;
        }
        
        if(left) count += b[ri][ci-1] & 1;
        
        if(right) count += b[ri][ci+1] & 1;
        
        return count;
            
        }
    
    
    void gameOfLife(vector<vector<int>>& b) {
        int r=b.size(), c=b[0].size();
        
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                int con = dfs(b, i, j);
                if(b[i][j]==1 && (con==2 || con==3))
                    b[i][j]+=2;
                else if(b[i][j]==0 && con==3)
                    b[i][j]+=2;
            }
        }
        
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(b[i][j] & 2)
                    b[i][j]=1;
                
                else b[i][j]=0;
            }
        }
    }
};

https://leetcode.com/problems/game-of-life/
