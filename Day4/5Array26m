class Solution {
public:
    int mergesort(vector<int>& nums, int l, int m, int r){
        int c=0, j=m+1;
        for(int i=l;i<=m;i++){
            while(j<=r && nums[i] > 2LL * nums[j])
                j++;
            c += j-(m+1);
        }
        
        vector<int> t;
        int left=l, right=m+1;
        while(left<=m && right<=r){
            if(nums[left]<=nums[right])
                t.push_back(nums[left++]);
            else
                t.push_back(nums[right++]);
        }
        
        while(left<=m)
            t.push_back(nums[left++]);
        
        while(right<=r)
            t.push_back(nums[right++]);
        
        for(int i=l;i<=r;i++)
            nums[i]=t[i-l];
        
        return c;
    }
    int merge(vector<int>& nums, int l, int r){
        
        if(l>=r) return 0;
        int m = (r+l)/2;
        int inv = merge(nums, l, m);
        inv += merge(nums, m+1, r);
        inv += mergesort(nums, l, m, r);
        return inv;
    }
    int reversePairs(vector<int>& nums) {
        return merge(nums, 0, nums.size()-1);
    }
};

https://leetcode.com/problems/reverse-pairs/
